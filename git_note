Git学习笔记
==========

#.git目录结构
	.git/
		COMMIT_EDITMSG : 最新commit的 -m 参数后的信息
		FETCH_HEAD : 61a9d62c56867e70379e86873487a2e30114e43anot-for-merg   ebranch 'master' of github.com:tyrant0604/dinux 
        HEAD : ref: refs/heads/dev
        ORIG_HEAD : master分支的ID
        config : 用户配置文件，~/.gitconfig是素有用户的配置文件
        description
        hooks
        index
        info
        logs : 记录了分支的变更，可以在错误的reset时，通过refs重新恢复错误的重置
        objects
        refs/
            heads/ : 该目录下的引用称为分支，git rev-parse <branch> : 显示引用对应提交的ID
            remotes/
            tags/

#HEAD多个父提交的表示
    HEAD^ : HEAD的父提交
    HEAD^^ : HEAD^的父提交
    HEAD~3 : HEAD的第三个父提交

#git常用命令
    git status
        查看当前工作区的状态
        -u 将工作区所有修改进行提交

    git ls-files --with-tree=HEAD^
        列出对应提交的文件内容

    git add <file>
        将文件加入暂存区

    git rm filename
        从暂存区删除文件

    git mv
        改名

    git add .gitignore
        该忽略是共享式的，即添加到版本库后，其他clone版本库的人都会起作用
        git commit -m 'ignore files'
        创建.gitignore 并添加要忽略的文件名，提交到版本库，忽略只对未跟踪的文件起作用，对于已经加入版本库的文件不起作用
        .git/info/exclude 只对本地有效的独享式忽略，git config --global core.excludesfile /path/to/file

    git commit -m 'message'
        将暂存区的修改提交到分支，并强制附加本次修改的说明

    git diff:
        git diff (default)
            工作区 & 暂存区
        git diff HEAD
            工作区 & 当前分支
        git diff --staged / --cached
            暂存区 & 当前分支

    git reset
        git reset [-q] [<commit>] [--] <paths> : 不会重置引用，也不会改变工作区，而是将制定<commit>下的文件（<paths>）覆盖暂存区的文件
            git reset = git reset HEAD : 将之前git add到暂存区的内容撤出
            git reset HEAD^ : 引用回退一次，暂存区的内容也会指向HEAD^的内容
            git reset -- filename : 只将filename撤出暂存区，是git add filename的反向操作
        git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>] : <commit>是可选项，可以使引用或提交ID；如果省略<commit>，默认使用HEAD
            --hard 会破坏工作区未提交的改动，慎用! 暂存区的目录树会被重写，会被master分支指向的分支指向的目录树所覆盖，但是工作区的不受影响
                该选项会做三件事：
                a.替换引用的指向，引用（HEAD）指向新的提交ID
                b.替换暂存区，替换后，暂存区的内容和引用指向的目录树一致
                c.替换工作区，替换后，工作区的内容和暂存区的内容一致
            --soft 值执行上述a.步骤，只改变引用的指向，不改变工作区和暂存区
                git reset --soft HEAD^ : 如果对之前提交的说明或提交的内容不满意时，将提交撤销可以重新提交
                git commit --amend = 1)git reset --soft HEAD^ ; 2)git commit -e -F .git/COMMIT_EDITMSG
                git commit --amend -m '重新提交并添加说明'
            --mixed 
                git reset --mixed HEAD^ = git reset HEAD^
    
    git reflog show <branch>
        展示分支的所有的操作历史及其ID，可以通过该ID重新恢复reset的过程
        如reset --hard HEAD^^^ 会将commit重置到第三个父提交，同时git log只会显示第三个父提交之前的提交信息，因此git reflog提供了重新恢复的方法

    git rm --cached <file>
        直接从暂存区删除，工作区不受影响

    git checkout 
        本质是修改HEAD本身的指向
        git checkout = git checkout HEAD汇总显示工作区、暂存区和HEAD的差异
        git checkout . / -- <file> : 用暂存区的全部/指定文件替换工作区的文件：危险
        git checkout <branch> -- filename 用制定<branch>的文件替换工作区和暂存区的文件
        git checkout HEAD^ 和 git reset HEAD^ 的区别：
            checkout 仅仅改变HEAD的指向，分支（master/dev...）的指向并未改变，默认情况下HEAD指向分支（master/dev...）；
                git checkout HEAD^ : 此时处于[ditached HEAD-分离头指针]，HEAD并未指向任何分支，在此时对工作区进行的修改都处于一个新建的临时分支下，再执行git checkout <branch>将临时分支的提交合并到分支上；
                如果在临时分支下有多次提交，中间的提交可能会丢失；使用git merge ID 将之前临时分支中的提交合并到分支上
            reset 改变的是分支的指向，HEAD始终指向分支，reset并没有对HEAD作出任何改变

    git ls-tree -l HEAD
        展示当前分支的目录树

    git ls-files -s
        显示暂存区的目录树，第三个字段是暂存区的编号

    git clean -fd
        清空工作区中没有加入版本库的文件和目录（非跟踪文件和目录）

    git log -n / --oneline / -p / --graph / --pretty=raw,one / HEAD / <branch> /
        提交日志

    git cat-file -option ID
        例: git cat-file commit HEAD
            git cat-file tree HEAD^{tree}
            git cat-file blob HEAD:filename
        展示Git对象ID的属性
        commit对象：
            tree e286fc991426faf5b85cc116c55128544d811d1b
            parent 59c672ef2d8508bb8c86e1e589b6e23b2d1ffda1
            author dx <dingxue0604@pku.edu.cn> 1504947546 +0800
            committer dx <dingxue0604@pku.edu.cn> 1504947546 +0800

            change texts filename
        tree对象保存目录结构
            100644 blob 8b35d0b72c3fa2971d241bb6baa3ce8d8ec5d95e    git_note
            100644 blob f65e3cabbfda63086716edfd1513f538c1cd2043test.py
            100644 blob 8b35d0b72c3fa2971d241bb6baa3ce8d8e  c5d95etext  
        blob对象保存着文件的内容，保存在.git/objects/目录下，以ID的前两位作为目录名，后38位作为文件名

    git stash
        git stash 分别对工作区和暂存区的状态进行保存
        git stash list 列出多个保存的工作状态
        git stash pop [--index] [<stash>] 没有参数时，恢复最新的工作进度，并从g工作进度列表中删除
            --index 除了恢复工作区的文件，还恢复暂存区的文件，
        git stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet] [-u|--include-untracked] [-a|--all] [<message>]]
            git stash save "message..."
            --p|--patch 会显示工作区与HEAD的差异，通过对差异文件的编辑决定要最终要保存的工作区的文件
            -k|--keep-index 保存进度时不会讲暂存区重置，默认暂存区和工作区重置
        git stash drop [<stash>] 删除一个存储的进度，默认删除最近一个进度
        git stash clear 删除所有的进度
        git stash branch <branchname> [<stash>] 基于进度创建分支

    git archive
        将版本库中的提交归档
        git archive -o file.zip HEAD 将最新提交的目录树归档
        git archive -o file.tar HEAD subdir dir ... 将部分目录归档

    git blame
        逐行显示文件的提交
        git blame -L n,m filename 只显示从第n行开始的m行

    git tag <tagname> <commit>
        为某次提交打标签

    git rebase
        对提交执行变基操作，可以实现将指定范围的提交嫁接到另外一个提交上
        git rebase --noto <newbase> <since> <till>
            a.先执行git checkout <till>切换到<till>，如果<till>不是一个分支，则变基操作是在distach HEAD状态下进行
            b.将<since>...<till>的提交范围写入临时文件，包括<till>之前的所有提交，但是不包括<since>和<since>的历史提交
            c.将当前分支强制重置（git reset --hear <newbase>）到<newbase>上
            d.从保存在临时文件中的提交列表中，将逐一按顺序重新提交到重置之后的分支上
            e.如果遇到提交已经在分支中，则跳过该提交
            f.如果在变基过程中遇到冲突，暂停下来等待解决冲突，解决冲突后执行--continue继续变基，--skip则跳过当前遇到的提交，--abort终止提交回到变基前的分支上
            例：顺序的提交A,B,C,D,E,F,要跳过D将EF嫁接到C上，可执行如下操作git rebase --onto C E^ F
            如要剔除提交列表中的某个提交可以执行 git rebase --onto X^ X
        git rebase --continue | --skip | --abort | --edit-todo
            变基运行过程中被中断时采用的命令
            --continue 先解决冲突，添加到暂存区，不提交，然后在恢复变基操作时使用该命令
            --skip 遇到冲突，跳过当前提交时使用
            --abort 遇到冲突，终止变基操作，回到之前的提交
    
    git clone
        git clone <repository> <directory> 将<repository>指向的版本库创建一个克隆到<directory>目录，包含工作区
        git clone --bare  <repository> <directory.git> 裸版本库，一般以.git后缀，不包含工作区
        git clone --mirror <repository> <directory.git> 裸版本库对上游版本库进行了注册，以便在.git版本库中使用git fetch 中持续同步

#Git协议和工作协同
    Git协议
        SSH协议：ssh://[user@]example.com[:port]/path/to/repo | [user@]example.com:path/to/repo
        GIT协议：git://example.com[:port]/path/to/repo.git
        HTTP[S]协议：http[s]://example.com[:port]/path/to/repo.git
        FTP[s]协议：ftp[s]://example.com[:port]/path/to/repo.git
        RSYNC协议：rsync://example.com[:port]/path/to/repo.git
        本地协议：file://path/to/repo.git | /path/to/repo.git

    git branch
        git branch 显示本地分支列表
        git branch <branchname> 基于当前HEAD创建分支
        git branch <branchname> <start-point> 基于<start-point>创建分支
        git brnach -d <branchname> 删除分支，如果该分支尚未合并到其他分支，不能删除
        git branch -D <branchname> 强制删除分支
        git branch -m <oldbranch> <newbranch> 分支重命名，如果<newbranch>已经存在，不能更名
        git branch -M <oldbranch> <newbranch> 强制重命名分支
        git checkout -b <newbranch> [<start-point>] 创建并切换到新分支，等价于git branch <newbranch> + git checkout <newbranch>
    
    git 远程分支
        [remote "origin"]
            url = git@github.com:tyrant0604/dinux.git
            fetch = +refs/heads/*:refs/remotes/origin/*
        该配置以origin为名注册了一个远程版本库
        url : git clone url 时所用的地址
        fetch : (+)开头是强制进行引用的替换，即使即将进行的替换是非快快进式的
            (:)前时使用了通配符，指的是远程版本库的所有分支
    git 分支追踪
        为了能够在远程分支上进行工作，需要基于远程分支创建本地分支
        git checkout -b dev origin/dev 显式的从远程分支创建本地分支
        和远程分支建立跟踪后，本地分支具有如下特性：
            a.检查工作区状态时，会显示本地分支和被跟踪远程分支提交之间的关系
            b.当执行git pull 时，会和被跟踪的远程分支进行合并或者变基，如果两者出现版本偏离
            c.当执行git push 时，会推送到远程版本库的相应分支中，











